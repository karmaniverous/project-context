diff a/src/stan/patch/service.ts b/src/stan/patch/service.ts	(rejected hunks)
@@ -307,60 +301,104 @@ export const runPatch = async (
         );
       } catch {
         // best-effort
       }
 
-      // FEEDBACK bundle to clipboard (self-identifying)
-      try {
-        const changed = pathsFromPatch(cleaned);
-        const failedPaths = js.failed.map((f) => f.path);
-        const anyOk = js.okFiles.length > 0;
-        const overall = check
-          ? anyOk
-            ? 'check'
-            : 'check'
-          : anyOk
-            ? 'partial'
-            : 'failed';
-
-        // Best-effort repo name from package.json (no require())
-        let repoName: string | undefined;
-        try {
-          const rawPkg = await readFile(path.join(cwd, 'package.json'), 'utf8');
-          const pkg = JSON.parse(rawPkg) as { name?: string };
-          repoName = pkg.name;
-        } catch {
-          // ignore
-        }
-
-        // FS-backed diagnostics from parse (limit to 10 for chat)
-        const diagnostics = diagnosePatchWithFs(cwd, parsed).slice(0, 10);
-
-        type Strip = 'p1' | 'p0';
-        const stripList: Strip[] = attempts.map((a) =>
-          a.strip === 1 ? 'p1' : 'p0',
-        );
-
-        // Short last-error snippet from the final git-apply attempt
-        let lastErrorSnippet = '';
-        if (result.captures.length > 0) {
-          const last = result.captures[result.captures.length - 1];
-          lastErrorSnippet = (last.stderr ?? '')
-            .split(/\r?\n/)
-            .slice(0, 2)
-            .join(' ')
-            .trim()
-            .slice(0, 200);
-        }
-
-        const envelope = buildFeedbackEnvelope({
-          repo: { name: repoName, stanPath },
-          status: {
-            overall,
-            enginesTried: ['git', 'jsdiff'],
-            stripTried: Array.from(new Set<Strip>(stripList)),
-          },
-          summary: { changed, failed: failedPaths, fuzzy: [] },
-          patch: { cleanedHead: firstKB(cleaned, 4) },
-          attempts: {
-            git: {
-              tried: result.tried,
-              rejects: 0,
-              lastCode: result.lastCode,
-            },
-            jsdiff: {
-              okFiles: js.okFiles,
-              failedFiles: failedPaths,
-            },
-          },
-          lastErrorSnippet,
-          diagnostics,
-        });
-
-        const debugDir = path.join(path.dirname(patchAbs), '.debug');
-        await mkdir(debugDir, { recursive: true });
-        const fbPath = path.join(debugDir, 'feedback.txt');
-        await writeFile(fbPath, envelope, 'utf8');
-        const fbAbs = fbPath.replace(/\\/g, '/');
-        console.log(`stan: wrote patch feedback -> ${fbAbs}`);
-        try {
-          await copyToClipboard(envelope);
-          console.log(`stan: copied patch feedback to clipboard -> ${fbAbs}`);
-        } catch {
-          console.error(`stan: clipboard copy failed; feedback saved -> ${fbAbs}`);
-        }
-      } catch {
-        // best-effort
-      }
+      // FEEDBACK bundle to clipboard (self-identifying)
+      // Build the envelope first so we can still copy to clipboard even if file IO fails.
+      {
+        const changed = pathsFromPatch(cleaned);
+        const failedPaths = js.failed.map((f) => f.path);
+        const anyOk = js.okFiles.length > 0;
+        const overall = check ? (anyOk ? 'check' : 'check') : anyOk ? 'partial' : 'failed';
+
+        // Best-effort repo name from package.json (no require())
+        let repoName: string | undefined;
+        try {
+          const rawPkg = await readFile(path.join(cwd, 'package.json'), 'utf8');
+          const pkg = JSON.parse(rawPkg) as { name?: string };
+          repoName = pkg.name;
+        } catch {
+          // ignore
+        }
+
+        // FS-backed diagnostics from parse (limit to
